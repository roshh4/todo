{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roshi\\\\Desktop\\\\college\\\\internship\\\\webdev\\\\todo list\\\\client\\\\src\\\\LastThreeNotes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TileComponent = ({\n  title,\n  description,\n  updatedAt\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"tile\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Last Updated: \", updatedAt]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n_c = TileComponent;\nconst TilesContainer = () => {\n  _s();\n  const [tilesData, setTilesData] = useState([]);\n  const fetchTilesData = async () => {\n    try {\n      const response = await fetch('/api/tiles'); // Replace with your backend endpoint\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setTilesData(data);\n    } catch (error) {\n      console.error('Error fetching tiles data:', error);\n    }\n  };\n  useEffect(() => {\n    // Fetch tiles data on component mount\n    fetchTilesData();\n\n    // Periodically fetch tiles data (adjust the interval based on your needs)\n    const intervalId = setInterval(fetchTilesData, 5000); // Fetch every 5 seconds\n\n    // Cleanup function to clear the interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"tiles-container\",\n    children: tilesData.map(tile => /*#__PURE__*/_jsxDEV(TileComponent, {\n      ...tile\n    }, tile._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(TilesContainer, \"sWH0Zx5mYLomSoeZ90FvnWszqh4=\");\n_c2 = TilesContainer;\nexport default TilesContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"TileComponent\");\n$RefreshReg$(_c2, \"TilesContainer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TileComponent","title","description","updatedAt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","TilesContainer","_s","tilesData","setTilesData","fetchTilesData","response","fetch","ok","Error","status","data","json","error","console","intervalId","setInterval","clearInterval","id","map","tile","_id","_c2","$RefreshReg$"],"sources":["C:/Users/roshi/Desktop/college/internship/webdev/todo list/client/src/LastThreeNotes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst TileComponent = ({ title, description, updatedAt }) => (\r\n  <div className=\"tile\">\r\n    <h3>{title}</h3>\r\n    <p>{description}</p>\r\n    <p>Last Updated: {updatedAt}</p>\r\n  </div>\r\n);\r\n\r\nconst TilesContainer = () => {\r\n  const [tilesData, setTilesData] = useState([]);\r\n\r\n  const fetchTilesData = async () => {\r\n    try {\r\n      const response = await fetch('/api/tiles'); // Replace with your backend endpoint\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      setTilesData(data);\r\n    } catch (error) {\r\n      console.error('Error fetching tiles data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch tiles data on component mount\r\n    fetchTilesData();\r\n\r\n    // Periodically fetch tiles data (adjust the interval based on your needs)\r\n    const intervalId = setInterval(fetchTilesData, 5000); // Fetch every 5 seconds\r\n\r\n    // Cleanup function to clear the interval on component unmount\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"tiles-container\">\r\n      {tilesData.map((tile) => (\r\n        <TileComponent key={tile._id} {...tile} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TilesContainer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAC;EAAEC,KAAK;EAAEC,WAAW;EAAEC;AAAU,CAAC,kBACtDJ,OAAA;EAAKK,SAAS,EAAC,MAAM;EAAAC,QAAA,gBACnBN,OAAA;IAAAM,QAAA,EAAKJ;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,eAChBV,OAAA;IAAAM,QAAA,EAAIH;EAAW;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eACpBV,OAAA;IAAAM,QAAA,GAAG,gBAAc,EAACF,SAAS;EAAA;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAC7B,CACN;AAACC,EAAA,GANIV,aAAa;AAQnB,MAAMW,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMmB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;MAC5C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC3D;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClCR,YAAY,CAACO,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAED1B,SAAS,CAAC,MAAM;IACd;IACAkB,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMU,UAAU,GAAGC,WAAW,CAACX,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEtD;IACA,OAAO,MAAMY,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE1B,OAAA;IAAK6B,EAAE,EAAC,iBAAiB;IAAAvB,QAAA,EACtBQ,SAAS,CAACgB,GAAG,CAAEC,IAAI,iBAClB/B,OAAA,CAACC,aAAa;MAAA,GAAoB8B;IAAI,GAAlBA,IAAI,CAACC,GAAG;MAAAzB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAC1C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACG,EAAA,CAlCID,cAAc;AAAAqB,GAAA,GAAdrB,cAAc;AAoCpB,eAAeA,cAAc;AAAC,IAAAD,EAAA,EAAAsB,GAAA;AAAAC,YAAA,CAAAvB,EAAA;AAAAuB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}